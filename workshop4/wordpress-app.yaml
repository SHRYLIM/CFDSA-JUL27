## configmap creation
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-cm
  labels:
    app: wordpress

data:
  WORDPRESS_DB_HOST: wordpress-db-cluster-mysql.wordpress-ns.svc.local # service/wordpress-db-cluster-mysql
  WORDPRESS_DB_USER: root

### persistent volume claim creation
# enables retaining of wordpress content
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  labels:
    app: wordpress

spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi # wordpress content volume size
  storageClassName: do-block-storage
  volumeMode: Filesystem

## deployment creation
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-dep
  labels:
    app: wordpress

spec:
  replicas: 1 # single wordpress replica
  selector:
    matchLabels:
      app: wordpress
  ## pod creation
  template:
    metadata:
      name: wordpress-pod
      labels:
        app: wordpress
    spec:
      ## volume creation
      volumes:
      - name: wordpress-vol
        persistentVolumeClaim:
          claimName: wordpress-pvc
      ## container creation
      containers:
      - name: wordpress-container
        image: wordpress
        imagePullPolicy: IfNotPresent
        env: # reference the secret created
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef: 
              name: wordpress-db-secret
              key: ROOT_PASSWORD
        envFrom: # reference the config map created above
        - configMapRef: 
            name: wordpress-cm
        ports:
        - name: wordpress-port
          containerPort: 80
        volumeMounts: # mount the volume in the container
        - name: wordpress-vol
          mountPath: /var/www/html
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0 # don't want our site to be down

## service creation
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-svc
  labels:
    app: wordpress

spec:
  type: ClusterIP # because we are using ingress
  selector:
    app: wordpress
  ports:
  - port: 80 # exposing to the world
    targetPort: wordpress-port

## ingress creation
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: wordpress-ing
  labels:
    app: wordpress
  annotations:
    nginx.ingress.kubernetes.io/limit-rps: "5"

spec:
  ingressClassName: nginx
  rules:
  - host: acme.167.172.5.4.nip.io # client's domain name www.acme.com
    http:
      paths:
      - path: /
        backend: 
          serviceName: wordpress-svc
          servicePort: 80